name: PlatformIO — Build all envs (no artifacts)

on:
  workflow_dispatch:

jobs:
  # ------------------------------------------------------------
  # 1) Calcule le tag horodaté et prépare le corps de la release
  # ------------------------------------------------------------
  set-release-info:
    name: Prepare release tag/name/body
    runs-on: ubuntu-latest
    outputs:
      tag: ${{ steps.mk.outputs.tag }}
      name: ${{ steps.mk.outputs.name }}
      body: ${{ steps.mk.outputs.body }}
    steps:
      - name: Compute timestamped tag
        id: mk
        run: |
          TAG="v$(date -u +'%Y%m%d-%H%M')"
          NAME="$TAG"
          BODY="Automated build from commit ${GITHUB_SHA} (run ${GITHUB_RUN_NUMBER})"
          {
            echo "tag=$TAG"
            echo "name=$NAME"
            echo "body=$BODY"
          } >> "$GITHUB_OUTPUT"

  # ------------------------------------------------------------
  # 2) Crée la release UNE SEULE FOIS
  # ------------------------------------------------------------
  create-release:
    name: Create GitHub release
    runs-on: ubuntu-latest
    needs: [set-release-info]
    permissions:
      contents: write
    steps:
      - name: Create Release
        uses: softprops/action-gh-release@v2
        with:
          tag_name: ${{ needs.set-release-info.outputs.tag }}
          name: ${{ needs.set-release-info.outputs.name }}
          body: ${{ needs.set-release-info.outputs.body }}
          draft: false
          prerelease: true

  # ------------------------------------------------------------
  # 3) Build chaque env et UPLOAD DIRECTEMENT sur la release
  #    (aucun artifact intermédiaire)
  # ------------------------------------------------------------
  build-and-upload:
    name: Build ${{ matrix.env }}
    runs-on: ubuntu-latest
    needs: [create-release, set-release-info]
    permissions:
      contents: write
    strategy:
      fail-fast: false
      matrix:
        env:
          - esp32s3-zero
          - esp32c3-supermini
          - esp32s3-xiao
          - esp32s3-supermini
          - esp32s3-xiao-bleonly

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup Python
        uses: actions/setup-python@v4
        with:
          python-version: "3.10"

      - name: Install PlatformIO
        run: |
          python -m pip install --upgrade pip
          pip install -U platformio
          pio --version

      - name: Show PlatformIO & board info (debug)
        run: |
          pio platform show espressif32 || true
          pio boards | sed -n '1,200p' || true

      - name: Build environment ${{ matrix.env }}
        run: |
          echo "Building environment: ${{ matrix.env }}"
          pio run -e "${{ matrix.env }}" --project-dir . --verbose
          echo "Listing build output:"
          ls -la .pio/build/${{ matrix.env }} || true
          find .pio/build/${{ matrix.env }} -maxdepth 2 -type f -print || true

      - name: Rename firmware binaries (if present)
        shell: bash
        run: |
          set -euo pipefail
          BUILD_DIR=".pio/build/${{ matrix.env }}"
          if [ -f "$BUILD_DIR/firmware.bin" ]; then
            mv "$BUILD_DIR/firmware.bin" "$BUILD_DIR/firmware-${{ matrix.env }}.bin"
          fi
          if [ -f "$BUILD_DIR/firmware-combined.bin" ]; then
            mv "$BUILD_DIR/firmware-combined.bin" "$BUILD_DIR/firmware-combined-${{ matrix.env }}.bin"
          fi

      - name: Package binaries (zip what's available)
        shell: bash
        run: |
          set -euo pipefail
          BUILD_DIR=".pio/build/${{ matrix.env }}"
          OUT="out-${{ matrix.env }}"
          mkdir -p "$OUT"
          # Copie conditionnelle
          cp "$BUILD_DIR/firmware-${{ matrix.env }}.bin" "$OUT/" 2>/dev/null || true
          cp "$BUILD_DIR/firmware-combined-${{ matrix.env }}.bin" "$OUT/" 2>/dev/null || true
          # Sanity check
          if [ -z "$(ls -A "$OUT")" ]; then
            echo "Aucun binaire produit pour ${{ matrix.env }}"; exit 1
          fi
          ZIP="${{ needs.set-release-info.outputs.tag }}-${{ matrix.env }}.zip"
          zip -j "$ZIP" "$OUT"/*

      - name: Upload to release
        uses: softprops/action-gh-release@v2
        with:
          tag_name: ${{ needs.set-release-info.outputs.tag }}
          files: |
            ${{ needs.set-release-info.outputs.tag }}-${{ matrix.env }}.zip
            .pio/build/${{ matrix.env }}/firmware-${{ matrix.env }}.bin
            .pio/build/${{ matrix.env }}/firmware-combined-${{ matrix.env }}.bin
