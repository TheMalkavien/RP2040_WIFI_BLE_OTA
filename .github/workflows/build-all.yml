name: PlatformIO — Build all envs

on:
  workflow_dispatch:

jobs:
  build:
    name: Build ${{ matrix.env }}
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        env:
          - esp32s3-zero
          - esp32c3-supermini
          - esp32s3-xiao
          - esp32s3-supermini
          - esp32s3-xiao-bleonly

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup Python
        uses: actions/setup-python@v4
        with:
          python-version: "3.10"

      - name: Install PlatformIO
        run: |
          python -m pip install --upgrade pip
          pip install -U platformio
          pio --version

      - name: Show PlatformIO & board info (debug)
        run: |
          pio platform show espressif32 || true
          pio boards | sed -n '1,200p' || true

      - name: Build environment ${{ matrix.env }}
        run: |
          echo "Building environment: ${{ matrix.env }}"
          pio run -e "${{ matrix.env }}" --project-dir . --verbose
          echo "Listing build output:"
          ls -la .pio/build/${{ matrix.env }} || true
          find .pio/build/${{ matrix.env }} -maxdepth 2 -type f -print || true

      - name: Upload firmware artifact
        uses: actions/upload-artifact@v4
        with:
          name: firmware-${{ matrix.env }}
          path: |
            .pio/build/${{ matrix.env }}/firmware.bin
            .pio/build/${{ matrix.env }}/firmware-combined.bin
  create_release:
    name: Create GitHub release (timestamp)
    runs-on: ubuntu-latest
    needs: build
    permissions:
      contents: write
    env:
      ASSET_NAME: ${{ matrix.env }}

    steps:
      - name: Checkout repo
        uses: actions/checkout@v4

      - name: Download build artifacts
        # télécharge tous les artifacts uploadés par les jobs build
        uses: actions/download-artifact@v4
        with:
          path: artifacts

      - name: Set release tag, name and body
        id: set_tag
        run: |
          # Format de tag: vYYYYMMDD-HHMM (UTC)
          TAG="v$(date -u +'%Y%m%d-%H%M')"
          echo "RELEASE_TAG=${TAG}" >> $GITHUB_ENV
          echo "RELEASE_NAME=${TAG}" >> $GITHUB_ENV
          echo "RELEASE_BODY=Automated build from commit ${GITHUB_SHA} (run ${GITHUB_RUN_NUMBER})" >> $GITHUB_ENV
          echo "Created tag: ${TAG}"

      - name: Show artifacts (debug)
        run: |
          echo "Listing downloaded artifacts:"
          ls -R artifacts || true

      - name: Zip the downloaded files
        run: zip -j -r ${{ env.ASSET_NAME }}.zip ./artefact-downloads

      - name: Create Release and upload firmware files
        uses: softprops/action-gh-release@v2
        with:
          tag_name: ${{ env.RELEASE_TAG }}
          name: ${{ env.RELEASE_NAME }}
          body: ${{ env.RELEASE_BODY }}


      - name: Upload release asset to GitHub
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ needs.create-release.outputs.upload_url }}
          asset_path: ./${{ env.ASSET_NAME }}.zip
          asset_name: ${{ env.ASSET_NAME }}.zip
          asset_content_type: application/zip
